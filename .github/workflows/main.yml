name: Build & Deploy

on:
  pull_request:
    branches: [ "master" ]
  push:
    branches: [ "master" ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "deploy"
  cancel-in-progress: true

jobs:
  filter:
    runs-on: ubuntu-latest
    outputs:
      web: ${{ steps.filter.outputs.web }}
      terraform: ${{ steps.filter.outputs.terraform }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            web:
              - 'web/**'
            terraform:
              - 'terraform/**'

  terraform:
    needs: filter
    if: needs.filter.outputs.terraform == 'true'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Format
        working-directory: ./terraform
        run: terraform fmt -check

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        working-directory: ./terraform
        run: terraform apply -auto-approve

  build:
    needs: filter
    if: needs.filter.outputs.web == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: web
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: web/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Generate static site
        run: npm run generate

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: web/.output/public

  deploy-pages:
    needs: build
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build
          path: ./web/.output/public

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact for Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./web/.output/public

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  deploy-aws:
    needs: build
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build
          path: ./web/.output/public

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::646082475080:role/dentiste-auterive-github-role
          aws-region: eu-west-1

      - name: Deploy to AWS (S3)
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_REGION: 'eu-west-1'
          SOURCE_DIR: 'web/.output/public'

      - name: Invalidate CloudFront cache
        run: |
          for id in $(aws cloudfront list-distributions --query \
            "DistributionList.Items[*].{id:Id,origin:Origins.Items[0].Id}[?origin=='${{ secrets.AWS_S3_BUCKET }}'].id" \
            --output text); do
            aws cloudfront create-invalidation --distribution-id $id --paths "/*"
          done
